{
  "logs": [
    {
      "message": "üóÇÔ∏è [DATA DOWNLOAD] Preparing data download for symbols: SPY",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "üìÖ [DATA DOWNLOAD] Date range: 2025-10-08 to 2025-10-08",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "üîç [DATA CHECK] Checking data for SPY...",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "‚ö†Ô∏è [DATA CHECK] Check completed in 0.1s - Missing data for 1 symbols: SPY",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "‚úÖ [DATA CHECK] Complete data for 0 symbols: None",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "üìä [DATA DOWNLOAD] Daily and Minute data will always be downloaded for latest updates",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "‚¨áÔ∏è [DATA CHECK] Will download Daily/Minute for all symbols + Seconds data for 1 missing symbols: SPY",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "üöÄ [DATA DOWNLOAD] Starting download process...",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "üöÄ [DATA DOWNLOAD] Starting download process...",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "üõ†Ô∏è [DATA DOWNLOAD] Using native Polygon incremental downloader",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "‚è±Ô∏è [DATA DOWNLOAD] Native step 1/3: Daily (1 symbols)",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "‚è±Ô∏è [DATA DOWNLOAD] Native step 2/3: Minute (1 symbols)",
      "phase": "data_download",
      "timestamp": "14:07:59"
    },
    {
      "message": "‚è±Ô∏è [DATA DOWNLOAD] Native step 3/3: Second (1 symbols)",
      "phase": "data_download",
      "timestamp": "14:09:05"
    },
    {
      "message": "‚úÖ [DATA DOWNLOAD] Native downloader finished in 68.1s (downloads: 503, cache hits: 0)",
      "phase": "data_download",
      "timestamp": "14:09:07"
    },
    {
      "message": "‚úÖ [DATA DOWNLOAD] Phase completed in 68.2s",
      "phase": "data_download",
      "timestamp": "14:09:07"
    },
    {
      "message": "üöÄ [BACKTEST EXECUTION] Starting backtest execution phase",
      "phase": "backtest_execution",
      "timestamp": "14:09:07"
    },
    {
      "message": "üè† [BACKTEST EXECUTION] Using local data (no live API calls during backtest)",
      "phase": "backtest_execution",
      "timestamp": "14:09:07"
    },
    {
      "message": "‚úÖ [BACKTEST EXECUTION] Config file ready: /var/folders/n1/jf02v0bn467c8m841mwsjqxr0000gn/T/zac-missing-data-V1BcUK/config/parameters.py",
      "phase": "backtest_execution",
      "timestamp": "14:09:07"
    },
    {
      "message": "‚úÖ [BACKTEST EXECUTION] Config file prepared in data folder for algorithm access",
      "phase": "backtest_execution",
      "timestamp": "14:09:07"
    },
    {
      "message": "‚ö° [BACKTEST EXECUTION] Launching Lean CLI with command: lean backtest ZacQC --no-update",
      "phase": "backtest_execution",
      "timestamp": "14:09:07"
    },
    {
      "message": "‚úÖ [BACKTEST EXECUTION] Lean process started (PID: 12450)",
      "phase": "backtest_execution",
      "timestamp": "14:09:07"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.421 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] version-id - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.424 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] cache-location - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.426 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] api-url - Using default value: https://www.quantconnect.com/api/v2/",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.426 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] plugin-directory - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.428 TRACE:: Composer(): Loading Assemblies from",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] /Lean/Launcher/bin/Debug",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.467 TRACE:: Python for .NET Assembly: Python.Runtime,",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] Version=2.0.48.0, Culture=neutral, PublicKeyToken=5000fea6cba702dd",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.486 TRACE:: Engine.Main(): LEAN ALGORITHMIC TRADING ENGINE",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] v2.5.0.0 Mode: DEBUG (64bit) Host: Mac-Studio",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.492 TRACE:: Engine.Main(): Started 11:09 AM",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.496 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] lean-manager-type - Using default value: LocalLeanManager",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.514 TRACE:: JobQueue.NextJob(): Selected /LeanCLI/main.py",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.540 TRACE:: Config.GetValue():",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] scheduled-event-leaky-bucket-capacity - Using default value: 120",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.540 TRACE:: Config.GetValue():",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] scheduled-event-leaky-bucket-time-interval-minutes - Using default value: 1440",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.540 TRACE:: Config.GetValue():",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] scheduled-event-leaky-bucket-refill-amount - Using default value: 18",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.541 TRACE:: Config.GetValue(): storage-limit - Using default",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] value: 10737418240",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.544 TRACE:: Config.GetValue(): storage-permissions - Using",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] default value: Read=True Write=True Delete=True",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.544 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] optimization-id - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.545 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] backtest-name - Using default value: local",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.547 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] data-channel - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.548 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] python-venv - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.548 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] out-of-sample-max-end-date - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.548 TRACE:: Config.GetValue(): out-of-sample-days - Using",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] default value: 0",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.549 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] data-permission-manager - Using default value: DataPermissionManager",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.549 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] data-monitor - Using default value: QuantConnect.Data.DataMonitor",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.558 TRACE:: Config.GetValue(): algorithm-creation-timeout -",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] Using default value: 90",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.563 TRACE:: Config.GetValue(): zip-data-cache-provider - Using",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] default value: 10",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.564 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] fundamental-data-provider - Using default value: CoarseFundamentalDataProvider",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.566 TRACE:: AlgorithmManager.CreateTokenBucket(): Initializing",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] LeakyBucket: Capacity: 120 RefillAmount: 18 TimeInterval: 1440",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.573 TRACE:: Config.GetValue(): downloader-data-update-period -",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] Using default value: 7",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.575 TRACE:: Engine.Run(): Resource limits '0' CPUs. 2147483647",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] MB RAM.",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:08.577 TRACE:: TextSubscriptionDataSourceReader.SetCacheSize():",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] Setting cache size to 71582788 items",
      "phase": "backtest_execution",
      "timestamp": "14:09:08"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:09.018 TRACE:: PythonInitializer.Initialize(): start...",
      "phase": "backtest_execution",
      "timestamp": "14:09:09"
    },
    {
      "message": "[BACKTEST EXECUTION] PythonEngine.Initialize(): clr GetManifestResourceStream...",
      "phase": "backtest_execution",
      "timestamp": "14:09:09"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:09.434 TRACE:: PythonInitializer.Initialize(): ended",
      "phase": "backtest_execution",
      "timestamp": "14:09:09"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:09.435 TRACE:: AlgorithmPythonWrapper(): Python version 3.11.9 |",
      "phase": "backtest_execution",
      "timestamp": "14:09:09"
    },
    {
      "message": "[BACKTEST EXECUTION] packaged by conda-forge | (main, Apr 19 2024, 18:26:34) [GCC 12.3.0]: Importing",
      "phase": "backtest_execution",
      "timestamp": "14:09:09"
    },
    {
      "message": "[BACKTEST EXECUTION] python module main",
      "phase": "backtest_execution",
      "timestamp": "14:09:09"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.353 TRACE:: AlgorithmPythonWrapper(): main successfully",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] imported.",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.365 TRACE:: AlgorithmPythonWrapper(): Creating IAlgorithm",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] instance.",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.370 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] databases-refresh-period - Using default value: 1.00:00:00",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.371 TRACE:: Config.GetValue(): ignore-unknown-asset-holdings -",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Using default value: True",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.424 TRACE:: Config.GetValue(): mute-python-library-logging -",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Using default value: True",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.426 TRACE:: LocalObjectStore.Initialize(): Storage Root:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] /Storage. StorageFileCount 9999999. StorageLimit 10240MB. StoragePermissions",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Read=True Write=True Delete=True",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.429 TRACE:: Config.GetValue(): zip-data-cache-provider - Using",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] default value: 10",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.432 TRACE:: HistoryProviderManager.Initialize(): history",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] providers [SubscriptionDataReaderHistoryProvider]",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.434 TRACE:: BaseSetupHandler.Setup(LocalPlatform): UID:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 290161, PID: -837531786, Version: 2.5.0.0, Source: WebIDE",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.436 TRACE:: Config.Get(): Configuration key not found. Key:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] security-data-feeds - Using default value:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.506 TRACE:: Config.GetValue(): data-feed-workers-count - Using",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] default value: 10",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.507 TRACE:: Config.GetValue(): data-feed-max-work-weight -",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Using default value: 400",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.507 TRACE:: WeightedWorkScheduler(): will use 10 workers and",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] MaxWorkWeight is 400",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.793 TRACE:: Event Name \"EveryDay: 15.98\", scheduled to run.",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.795 TRACE:: Event Name \"EveryDay: 14\", scheduled to run.",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.806 TRACE:: BaseSetupHandler.SetupCurrencyConversions():",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Account Type: Margin",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] ",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Symbol      Quantity    Conversion = Value in USD",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] USD: $      500000.00 @       1.00 = $500000",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] -------------------------------------------------",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] CashBook Total Value:                $500000",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] ",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.807 TRACE:: Total margin information: TotalMarginUsed: 0.00,",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] MarginRemaining: 500000.00",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.808 TRACE:: SetUp Backtesting: User: 290161 ProjectId:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] -837531786 AlgoId: 1762380880",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.809 TRACE:: Dates: Start: 10/01/2025 End: 10/10/2025 Cash:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] ¬§500,000.00 MaximumRuntime: 100.00:00:00 MaxOrders: 2147483647",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.810 TRACE:: BacktestingResultHandler(): Sample Period Set:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 04.00",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.811 TRACE:: Config.GetValue(): forward-console-messages -",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Using default value: True",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.811 TRACE:: JOB HANDLERS:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] DataFeed:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.DataFeeds.FileSystemDataFeed",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Setup:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.Setup.BacktestingSetupHandler",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] RealTime:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Results:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.Results.BacktestingResultHandler",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Transactions:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Object Store:         QuantConnect.Lean.Engine.Storage.LocalObjectStore",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] History Provider:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.HistoricalData.HistoryProviderManager",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Brokerage:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Brokerages.Backtesting.BacktestingBrokerage",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Data Provider:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] QuantConnect.Lean.Engine.DataFeeds.DefaultDataProvider",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] ",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.820 TRACE:: Event Name \"Daily Sampling\", scheduled to run.",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.821 TRACE:: AlgorithmManager.Run(): Begin DataStream - Start:",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 10/1/2025 12:00:00 AM Stop: 10/10/2025 11:59:59 PM Time: 10/1/2025 12:00:00 AM",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Warmup: False",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.837 TRACE:: Debug: Launching analysis for 1762380880 with LEAN",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Engine v2.5.0.0",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:11.934 TRACE:: UniverseSelection.AddPendingInternalDataFeeds():",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] Adding internal benchmark data feed",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] SPY,#0,SPY,Hour,TradeBar,Trade,Adjusted,OpenInterest,Internal",
      "phase": "backtest_execution",
      "timestamp": "14:09:11"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:09:12.171 TRACE:: Debug: Accurate daily end-times now enabled by",
      "phase": "backtest_execution",
      "timestamp": "14:09:12"
    },
    {
      "message": "[BACKTEST EXECUTION] default. See more at https://qnt.co/3YHaWHL. To disable it and use legacy daily",
      "phase": "backtest_execution",
      "timestamp": "14:09:12"
    },
    {
      "message": "[BACKTEST EXECUTION] bars set self.settings.daily_precise_end_time = False.",
      "phase": "backtest_execution",
      "timestamp": "14:09:12"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:12.461 TRACE:: Isolator.ExecuteWithTimeLimit(): Used: 121,",
      "phase": "backtest_execution",
      "timestamp": "14:10:12"
    },
    {
      "message": "[BACKTEST EXECUTION] Sample: 150, App: 1159, CurrentTimeStepElapsed: 00:00.000. CPU: 112%",
      "phase": "backtest_execution",
      "timestamp": "14:10:12"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.577 TRACE:: Synchronizer.GetEnumerator(): Exited thread.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.577 TRACE:: AlgorithmManager.Run(): Firing On End Of",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] Algorithm...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.579 TRACE:: Engine.Run(): Exiting Algorithm Manager",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.580 TRACE:: StopSafely(): Waiting for 'Isolator Thread' thread",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] to stop...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.580 TRACE:: FileSystemDataFeed.Exit(): Start. Setting",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] cancellation token...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.581 TRACE:: FileSystemDataFeed.Exit(): Exit Finished.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.581 TRACE:: BacktestingResultHandler.Exit(): starting...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.582 TRACE:: BacktestingResultHandler.Exit(): Saving logs...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: StopSafely(): Waiting for 'Result Thread' thread",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] to stop...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: Log: === FINAL PERFORMANCE SUMMARY ===",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: Log: PERF_FINAL AAPL | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.09ms n=12480 | rally_update=avg:0.01ms max:0.10ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.21ms n=12479 | risk_checks=avg:0.01ms max:0.05ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.11ms max:24.35ms n=12479 | total=avg:0.20ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:24.44ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: Log: PERF_FINAL ABBV | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.03ms n=12480 | rally_update=avg:0.01ms max:0.55ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:1.41ms n=12479 | risk_checks=avg:0.00ms max:0.04ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.07ms max:3.90ms n=12479 | total=avg:0.15ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:3.99ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: Log: PERF_FINAL AMD | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.03ms n=12480 | rally_update=avg:0.01ms max:0.11ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.40ms n=12479 | risk_checks=avg:0.00ms max:0.12ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.07ms max:24.26ms n=12479 | total=avg:0.15ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:24.35ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: Log: PERF_FINAL AMZN | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.06ms n=12480 | rally_update=avg:0.01ms max:0.05ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.11ms n=12479 | risk_checks=avg:0.00ms max:0.12ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.10ms max:5.31ms n=12479 | total=avg:0.18ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:5.41ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.583 TRACE:: Log: PERF_FINAL GS | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.03ms n=12480 | rally_update=avg:0.01ms max:1.55ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.57ms n=12479 | risk_checks=avg:0.00ms max:0.10ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.10ms max:7.29ms n=12479 | total=avg:0.18ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:7.39ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL HAL | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.06ms n=12480 | rally_update=avg:0.01ms max:0.05ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.47ms n=12479 | risk_checks=avg:0.00ms max:0.04ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.07ms max:7.65ms n=12479 | total=avg:0.15ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:7.75ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL JNJ | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.10ms n=12480 | rally_update=avg:0.01ms max:0.12ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:4.67ms n=12479 | risk_checks=avg:0.00ms max:0.04ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.10ms max:1.92ms n=12479 | total=avg:0.18ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:4.81ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL MCD | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.03ms n=12480 | rally_update=avg:0.01ms max:0.07ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.90ms n=12479 | risk_checks=avg:0.00ms max:0.04ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.11ms max:20.01ms n=12479 | total=avg:0.19ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:20.10ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL META | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.06ms n=12480 | rally_update=avg:0.01ms max:0.12ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:1.46ms n=12479 | risk_checks=avg:0.00ms max:0.08ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.06ms max:5.45ms n=12479 | total=avg:0.15ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:5.59ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL NVDA | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.06ms n=12480 | rally_update=avg:0.01ms max:0.10ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:2.36ms n=12479 | risk_checks=avg:0.00ms max:0.07ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.11ms max:22.23ms n=12479 | total=avg:0.19ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:22.33ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL OXY | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.10ms n=12480 | rally_update=avg:0.01ms max:0.08ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:6.44ms n=12479 | risk_checks=avg:0.00ms max:0.06ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.10ms max:7.22ms n=12479 | total=avg:0.19ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:7.32ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL SHOP | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.05ms n=12480 | rally_update=avg:0.01ms max:0.36ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:1.31ms n=12479 | risk_checks=avg:0.00ms max:0.06ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.09ms max:3.07ms n=12479 | total=avg:0.18ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:3.16ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.584 TRACE:: Log: PERF_FINAL TSLA | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:1.63ms n=12480 | rally_update=avg:0.01ms max:0.11ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:0.19ms n=12479 | risk_checks=avg:0.00ms max:0.08ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.08ms max:6.49ms n=12479 | total=avg:0.16ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:6.59ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.585 TRACE:: Log: PERF_FINAL UBER | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.04ms n=12480 | rally_update=avg:0.01ms max:2.39ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:3.28ms n=12479 | risk_checks=avg:0.00ms max:0.04ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.09ms max:23.51ms n=12479 | total=avg:0.17ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:23.62ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.585 TRACE:: Log: PERF_FINAL V | data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:0.04ms n=12480 | rally_update=avg:0.01ms max:0.10ms n=12479 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] metrics=avg:0.05ms max:4.10ms n=12479 | risk_checks=avg:0.00ms max:0.06ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=12479 | strategy_logic=avg:0.11ms max:2.57ms n=12479 | total=avg:0.20ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:4.26ms n=12479",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.585 TRACE:: Log: PERF_FINAL_AGG data_manager=avg:0.00ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:1.63ms n=187200 | metrics=avg:0.05ms max:6.44ms n=187185 |",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] rally_update=avg:0.01ms max:2.39ms n=187185 | risk_checks=avg:0.00ms max:0.12ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] n=187185 | strategy_logic=avg:0.09ms max:24.35ms n=187185 | total=avg:0.17ms",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] max:24.44ms n=187185",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.585 TRACE:: Debug: Algorithm Id:(1762380880) completed in",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 62.77 seconds at 45k data points per second. Processing total of 2,808,751 data",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] points.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.585 TRACE:: Debug: Your log was successfully created and can",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] be retrieved from: /Results/1762380880-log.txt",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.585 TRACE:: BacktestingResultHandler.Run(): Ending Thread...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.622 TRACE::",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Total Orders 89",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Average Win 0.06%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Average Loss 0.00%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Compounding Annual Return 8.652%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Drawdown 0.300%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Expectancy 9.709",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Start Equity 500000",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: End Equity 501100.07",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Net Profit 0.220%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Sharpe Ratio 0.016",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Sortino Ratio 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Probabilistic Sharpe Ratio 96.997%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Loss Rate 33%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Win Rate 67%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Profit-Loss Ratio 15.06",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Alpha 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Beta 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Annual Standard Deviation 0.009",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Annual Variance 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Information Ratio 5.819",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Tracking Error 0.009",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Treynor Ratio 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Total Fees $76.25",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Estimated Strategy Capacity $9800000.00",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Lowest Capacity Asset ABBV 2T",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Portfolio Turnover 71.88%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: Drawdown Recovery 1",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] STATISTICS:: OrderListHash 84e79bd641b57df60c29386afb1ecca5",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.622 TRACE:: BacktestingResultHandler.SendAnalysisResult():",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] Processed final packet",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.622 TRACE:: Engine.Run(): Disconnecting from brokerage...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.623 TRACE:: Engine.Run(): Disposing of setup handler...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.623 TRACE:: Engine.Main(): Analysis Completed and Results",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] Posted.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.623 TRACE:: DataMonitor.Exit(): start...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.623 TRACE:: StopSafely(): Waiting for '' thread to stop...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.625 TRACE:: DataMonitor.GenerateReport():",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Total data requests 257",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Succeeded data requests 122",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Failed data requests 135",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Failed data requests percentage 53%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Total universe data requests 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Succeeded universe data requests 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Failed universe data requests 0",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] DATA USAGE:: Failed universe data requests percentage 0%",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.627 TRACE:: DataMonitor.Exit(): end",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] Engine.Main(): Analysis Complete.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.629 TRACE:: Engine.Main(): Packet removed from queue:",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 1762380880",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.629 TRACE:: LeanEngineSystemHandlers.Dispose(): start...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.629 TRACE:: LeanEngineSystemHandlers.Dispose(): Disposed of",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] system handlers.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.629 TRACE:: LeanEngineAlgorithmHandlers.Dispose(): start...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.630 TRACE:: LocalObjectStore.Dispose(): start...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.630 TRACE:: LocalObjectStore.Dispose(): end",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.630 TRACE:: LeanEngineAlgorithmHandlers.Dispose(): Disposed of",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] algorithm handlers.",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.631 TRACE:: StopSafely(): Waiting for 'CpuPerformance' thread",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] to stop...",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:14.631 TRACE:: PythonInitializer.Shutdown(): start",
      "phase": "backtest_execution",
      "timestamp": "14:10:14"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:16.300 TRACE:: PythonInitializer.Shutdown(): ended",
      "phase": "backtest_execution",
      "timestamp": "14:10:16"
    },
    {
      "message": "[BACKTEST EXECUTION] 20251016 11:10:16.300 TRACE:: Program.Main(): Exiting Lean...",
      "phase": "backtest_execution",
      "timestamp": "14:10:16"
    },
    {
      "message": "[BACKTEST EXECUTION] Successfully ran 'ZacQC' in the 'backtesting' environment and stored the output",
      "phase": "backtest_execution",
      "timestamp": "14:10:16"
    },
    {
      "message": "[BACKTEST EXECUTION] in 'ZacQC/backtests/2025-10-16_14-09-07'",
      "phase": "backtest_execution",
      "timestamp": "14:10:16"
    },
    {
      "message": "‚úÖ [BACKTEST EXECUTION] Backtest completed successfully",
      "phase": "backtest_execution",
      "timestamp": "14:10:16"
    },
    {
      "message": "Found backtest results: /Users/ahmedkhattab/Desktop/Projects/Zac/zac_qc/ZacQC/backtests/2025-10-16_14-09-07/1762380880.json",
      "timestamp": "14:10:16"
    }
  ]
}