#!/usr/bin/env python3
"""Compare Lean backtest artifacts between baseline and optimized runs.

The script inspects the benchmark metadata (latest.json files) generated by
`benchmarks/run_backtest.py`, selects the requested run indices, and verifies
that `summary.json` and `order-events.json` outputs are bit-for-bit identical.

Usage:
    python compare_runs.py \
        --baseline-json ../benchmarks/baseline/latest.json \
        --candidate-json ../benchmarks/optimized/latest.json \
        --baseline-run 1 \
        --candidate-run 1

Exit code is 0 when comparisons succeed, 1 otherwise.
"""
from __future__ import annotations

import argparse
import json
import sys
from pathlib import Path
from typing import Any, Dict, Tuple


SCRIPT_PATH = Path(__file__).resolve()
FEATURE_DIR = SCRIPT_PATH.parents[1]
BATCH_DEFAULTS = {
    "baseline": FEATURE_DIR / "benchmarks" / "baseline" / "latest.json",
    "candidate": FEATURE_DIR / "benchmarks" / "optimized" / "latest.json",
}


def load_metadata(path: Path) -> Dict[str, Any]:
    with path.open("r", encoding="utf-8") as handle:
        return json.load(handle)


def select_run(meta: Dict[str, Any], run_index: int) -> Dict[str, Any]:
    for run in meta.get("runs", []):
        if run.get("run_index") == run_index:
            return run
    raise ValueError(f"Run index {run_index} not found in metadata {meta.get('batch_id', '?')}")


def load_json(path: Path) -> Any:
    with path.open("r", encoding="utf-8") as handle:
        return json.load(handle)


def compare_json_structures(lhs: Any, rhs: Any) -> Tuple[bool, str]:
    if lhs == rhs:
        return True, ""
    lhs_dump = json.dumps(lhs, sort_keys=True, indent=2)
    rhs_dump = json.dumps(rhs, sort_keys=True, indent=2)
    return False, diff_strings(lhs_dump, rhs_dump)


def diff_strings(lhs: str, rhs: str, context: int = 3) -> str:
    import difflib

    lhs_lines = lhs.splitlines()
    rhs_lines = rhs.splitlines()
    diff = difflib.unified_diff(lhs_lines, rhs_lines, fromfile="baseline", tofile="candidate", n=context)
    return "\n".join(diff)


def main(argv: Any = None) -> int:
    parser = argparse.ArgumentParser(description="Compare Lean backtest artifacts for regression parity.")
    parser.add_argument("--baseline-json", type=Path, default=BATCH_DEFAULTS["baseline"],
                        help="Path to baseline benchmark metadata JSON.")
    parser.add_argument("--candidate-json", type=Path, default=BATCH_DEFAULTS["candidate"],
                        help="Path to candidate benchmark metadata JSON.")
    parser.add_argument("--baseline-run", type=int, default=1, help="Run index to compare from baseline batch.")
    parser.add_argument("--candidate-run", type=int, default=1, help="Run index to compare from candidate batch.")
    args = parser.parse_args(argv)

    baseline_meta = load_metadata(args.baseline_json)
    candidate_meta = load_metadata(args.candidate_json)

    baseline_run = select_run(baseline_meta, args.baseline_run)
    candidate_run = select_run(candidate_meta, args.candidate_run)

    baseline_summary = Path(baseline_run["summary_path"])
    candidate_summary = Path(candidate_run["summary_path"])
    baseline_orders = Path(baseline_run["order_events_path"])
    candidate_orders = Path(candidate_run["order_events_path"])

    summary_equal, summary_diff = compare_json_structures(load_json(baseline_summary), load_json(candidate_summary))
    orders_equal, orders_diff = compare_json_structures(load_json(baseline_orders), load_json(candidate_orders))

    print("Baseline batch:", baseline_meta.get("batch_id"))
    print("Candidate batch:", candidate_meta.get("batch_id"))
    print(f"Comparing baseline run {args.baseline_run} with candidate run {args.candidate_run}")
    print()
    print(f"Summary JSON identical: {summary_equal}")
    if not summary_equal:
        print(summary_diff)
    print()
    print(f"Order events JSON identical: {orders_equal}")
    if not orders_equal:
        print(orders_diff)

    return 0 if (summary_equal and orders_equal) else 1


if __name__ == "__main__":
    sys.exit(main())
